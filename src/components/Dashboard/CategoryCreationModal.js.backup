import React, { useState } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  IconButton,
  Box,
  Typography,
  TextField,
  Button,
  Paper,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Alert,
  CircularProgress,
  FormControl,
  Select,
  MenuItem
} from '@mui/material';
import CloseIcon from '@mui/icons-material/Close';
import CheckIcon from '@mui/icons-material/Check';
import InfoIcon from '@mui/icons-material/Info';
import { useAuthState } from 'react-firebase-hooks/auth';
import { auth } from '../../services/firebase';
import {
  createCustomCategory,
  migrateIncidentsToCustomCategory,
  getCustomCategories
} from '../../services/incidentService';

// Color options from theme
const COLOR_OPTIONS = [
  { value: '#6D28D9', label: 'Purple', preview: '#6D28D9' },
  { value: '#10B981', label: 'Emerald', preview: '#10B981' },
  { value: '#F59E0B', label: 'Amber', preview: '#F59E0B' },
  { value: '#EF4444', label: 'Red', preview: '#EF4444' },
  { value: '#3B82F6', label: 'Blue', preview: '#3B82F6' },
  { value: '#EC4899', label: 'Pink', preview: '#EC4899' },
  { value: '#6B7280', label: 'Gray', preview: '#6B7280' },
  { value: '#8B5CF6', label: 'Violet', preview: '#8B5CF6' },
];

// Emoji options
const EMOJI_OPTIONS = [
  '🤢', '🤒', '😷', '🤧', '😪', '😣', '🔴', '💊', 
  '🌡️', '🩹', '🧠', '💙', '⚡', '🔥', '❄️', '📝'
];

const CategoryCreationModal = ({ 
  open, 
  onClose, 
  childId, 
  suggestion,
  onCategoryCreated 
}) => {
  const [user] = useAuthState(auth);
  const [loading, setLoading] = useState(false);
  const [step, setStep] = useState(1); // 1: configure, 2: confirm migration
  const [error, setError] = useState('');
  
  // Form state
  const [categoryName, setCategoryName] = useState(suggestion?.suggestedCategory || '');
  const [selectedColor, setSelectedColor] = useState(suggestion?.suggestedColor || COLOR_OPTIONS[0].value);
  const [selectedEmoji, setSelectedEmoji] = useState(suggestion?.suggestedIcon || EMOJI_OPTIONS[0]);
  const [remedies, setRemedies] = useState(suggestion?.suggestedRemedies?.join(', ') || 'Monitor symptoms, Comfort measures, Other');
  const [confirmMigration] = useState(true);

  // Create close handler using React.useCallback to ensure stable reference
  const closeModal = React.useCallback(() => {
    setStep(1);
    setError('');
    onClose();
  }, [onClose]);

  const nextStep = React.useCallback(() => {
    if (!categoryName.trim()) {
      setError('Category name is required');
      return;
    }
    setError('');
    setStep(2);
  }, [categoryName]);

  async function handleCreateCategory() {
    if (!categoryName.trim()) {
      setError('Category name is required');
      return;
    }

    setLoading(true);
    setError('');

    try {
      // Check current category count
      const existingCategories = await getCustomCategories(childId);
      const categoryCount = Object.keys(existingCategories).length;

      if (categoryCount >= 7) {
        setError(`You have ${categoryCount} custom categories. You'll reach the limit of 10 soon.`);
      }

      if (categoryCount >= 10) {
        setError('Maximum of 10 custom categories allowed. Please delete some categories first.');
        setLoading(false);
        return;
      }

      // Prepare category data
      const categoryData = {
        label: categoryName.trim(),
        color: selectedColor,
        emoji: selectedEmoji,
        remedies: remedies.split(',').map(r => r.trim()).filter(r => r.length > 0)
      };

      const authorInfo = {
        uid: user?.uid,
        name: user?.displayName || user?.email?.split('@')[0] || 'User',
        email: user?.email
      };

      // Create the category
      const newCategory = await createCustomCategory(childId, categoryData, authorInfo);

      // Migrate incidents if requested
      let migratedCount = 0;
      if (confirmMigration && suggestion?.incidents?.length > 0) {
        migratedCount = await migrateIncidentsToCustomCategory(
          childId,
          suggestion.incidents,
          newCategory.key
        );
      }

      // Notify parent component
      onCategoryCreated({
        category: newCategory,
        migratedCount
      });

      // Inline close functionality to avoid any reference issues
      setStep(1);
      setError('');
      onClose();
    } catch (error) {
      console.error('Error creating category:', error);
      setError(error.message || 'Failed to create category');
    } finally {
      setLoading(false);
    }
  };

  return (
    <Dialog
      open={open}
      onClose={closeModal}
      maxWidth="md"
      fullWidth
      fullScreen={window.innerWidth < 600}
    >
      <DialogTitle
        sx={{
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          backgroundColor: '#fafbfc',
          borderBottom: '1px solid #e5e7eb'
        }}
      >
        <Typography variant="h6" sx={{ fontWeight: 600 }}>
          {step === 1 ? 'Create New Category' : 'Confirm Migration'}
        </Typography>
        <IconButton onClick={closeModal}>
          <CloseIcon />
        </IconButton>
      </DialogTitle>

      <DialogContent sx={{ p: 0, backgroundColor: '#fafbfc' }}>
        {step === 1 && (
          <Box sx={{ p: 4 }}>
            {/* Category preview */}
            <Paper sx={{ p: 3, mb: 3, textAlign: 'center' }}>
              <Typography variant="subtitle2" color="text.secondary" gutterBottom>
                Category Preview
              </Typography>
              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', gap: 2 }}>
                <Typography sx={{ fontSize: '2rem' }}>{selectedEmoji}</Typography>
                <Typography variant="h6" sx={{ fontWeight: 600, color: selectedColor }}>
                  {categoryName || 'Category Name'}
                </Typography>
              </Box>
            </Paper>

            {/* Category Name */}
            <Box sx={{ mb: 3 }}>
              <Typography variant="subtitle1" gutterBottom sx={{ fontWeight: 600 }}>
                Category Name
              </Typography>
              <TextField
                fullWidth
                value={categoryName}
                onChange={(e) => setCategoryName(e.target.value)}
                placeholder="Enter category name..."
                error={!!error && error.includes('name')}
                helperText={error && error.includes('name') ? error : ''}
              />
            </Box>

            {/* Emoji Selection */}
            <Box sx={{ mb: 3 }}>
              <Typography variant="subtitle1" gutterBottom sx={{ fontWeight: 600 }}>
                Icon
              </Typography>
              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                {EMOJI_OPTIONS.map(emoji => (
                  <Button
                    key={emoji}
                    variant={selectedEmoji === emoji ? 'contained' : 'outlined'}
                    onClick={() => setSelectedEmoji(emoji)}
                    sx={{ 
                      minWidth: 48,
                      height: 48,
                      fontSize: '1.25rem',
                      p: 0
                    }}
                  >
                    {emoji}
                  </Button>
                ))}
              </Box>
            </Box>

            {/* Color Selection */}
            <Box sx={{ mb: 3 }}>
              <Typography variant="subtitle1" gutterBottom sx={{ fontWeight: 600 }}>
                Color
              </Typography>
              <FormControl fullWidth>
                <Select
                  value={selectedColor}
                  onChange={(e) => setSelectedColor(e.target.value)}
                  renderValue={(value) => {
                    const option = COLOR_OPTIONS.find(opt => opt.value === value);
                    return (
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                        <Box
                          sx={{
                            width: 20,
                            height: 20,
                            borderRadius: '50%',
                            backgroundColor: value
                          }}
                        />
                        {option?.label}
                      </Box>
                    );
                  }}
                >
                  {COLOR_OPTIONS.map(option => (
                    <MenuItem key={option.value} value={option.value}>
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                        <Box
                          sx={{
                            width: 20,
                            height: 20,
                            borderRadius: '50%',
                            backgroundColor: option.preview
                          }}
                        />
                        {option.label}
                      </Box>
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Box>

            {/* Remedies */}
            <Box sx={{ mb: 3 }}>
              <Typography variant="subtitle1" gutterBottom sx={{ fontWeight: 600 }}>
                Common Remedies
              </Typography>
              <TextField
                fullWidth
                multiline
                rows={3}
                value={remedies}
                onChange={(e) => setRemedies(e.target.value)}
                placeholder="Enter remedies separated by commas..."
                helperText="These will appear as options when logging this type of incident"
              />
            </Box>


            <Box sx={{ display: 'flex', gap: 2, justifyContent: 'flex-end' }}>
              <Button variant="outlined" onClick={closeModal}>
                Cancel
              </Button>
              <Button 
                variant="contained" 
                onClick={nextStep}
                disabled={!categoryName.trim()}
              >
                Next
              </Button>
            </Box>
          </Box>
        )}

        {step === 2 && (
          <Box sx={{ p: 4 }}>
            <Alert severity="info" sx={{ mb: 3 }}>
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                <InfoIcon />
                <Typography variant="body2">
                  Creating category "{categoryName}" will organize your incident tracking.
                </Typography>
              </Box>
            </Alert>

            {suggestion?.incidents && suggestion.incidents.length > 0 && (
              <Paper sx={{ p: 3, mb: 3 }}>
                <Typography variant="subtitle1" gutterBottom sx={{ fontWeight: 600 }}>
                  Migrate Previous Incidents
                </Typography>
                <Typography variant="body2" color="text.secondary" gutterBottom>
                  We found {suggestion.incidents.length} similar incidents that can be moved to this category:
                </Typography>
                
                <List dense sx={{ maxHeight: 200, overflow: 'auto', my: 2 }}>
                  {suggestion.incidents.slice(0, 5).map((incident, index) => (
                    <ListItem key={index} divider>
                      <ListItemIcon>
                        <CheckIcon color="success" fontSize="small" />
                      </ListItemIcon>
                      <ListItemText
                        primary={incident.customIncidentName}
                        secondary={new Date(incident.timestamp?.toDate?.() || incident.timestamp).toLocaleDateString()}
                      />
                    </ListItem>
                  ))}
                  {suggestion.incidents.length > 5 && (
                    <ListItem>
                      <ListItemText
                        primary={`... and ${suggestion.incidents.length - 5} more incidents`}
                        sx={{ fontStyle: 'italic', color: 'text.secondary' }}
                      />
                    </ListItem>
                  )}
                </List>

                <Typography variant="body2" color="text.secondary">
                  These incidents will keep their original names as reference, but will be organized under the new "{categoryName}" category.
                </Typography>
              </Paper>
            )}

            {error && (
              <Alert severity="error" sx={{ mb: 3 }}>
                {error}
              </Alert>
            )}

            <Box sx={{ display: 'flex', gap: 2, justifyContent: 'flex-end' }}>
              <Button variant="outlined" onClick={() => setStep(1)}>
                Back
              </Button>
              <Button 
                variant="contained" 
                onClick={handleCreateCategory}
                disabled={loading}
                startIcon={loading ? <CircularProgress size={20} /> : <CheckIcon />}
              >
                {loading ? 'Creating...' : 'Create Category'}
              </Button>
            </Box>
          </Box>
        )}
      </DialogContent>
    </Dialog>
  );
};

export default CategoryCreationModal;